apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.config.compileSdkVersion
    defaultConfig {
        applicationId rootProject.config.applicationId
        minSdkVersion rootProject.config.minSdkVersion
        targetSdkVersion rootProject.config.targetSdkVersion
        versionCode 1
        versionName rootProject.config.versionName
        buildConfigField "String", "MARVEL_API_KEY", "\"${getProperty("local.properties", "marvel_api_key")}\""
        buildConfigField "String", "MARVEL_HASH_KEY", "\"${getProperty("local.properties", "marvel_hash")}\""
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: '1.2.41'
    implementation "com.android.support:appcompat-v7:$rootProject.lib.supportLibraryVersion"
    implementation "com.android.support.constraint:constraint-layout:$rootProject.lib.constraintLayoutVersion"
    implementation "androidx.core:core-ktx:$rootProject.lib.ktxVersion"
    implementation "android.arch.navigation:navigation-fragment:$rootProject.lib.navigationVersion"
    implementation "android.arch.navigation:navigation-ui:$rootProject.lib.navigationVersion"

    // Dagger
    implementation "com.google.dagger:dagger:$rootProject.lib.daggerVersion"
    annotationProcessor "com.google.dagger:dagger-compiler:$rootProject.lib.daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$rootProject.lib.daggerVersion"

    // Glide
    implementation "com.github.bumptech.glide:glide:$rootProject.lib.glideVersion"
    kapt "com.github.bumptech.glide:compiler:$rootProject.lib.glideVersion"

    // Simplerecyclerview
    implementation "com.jaychang:simplerecyclerview:$rootProject.lib.simplerecyclerviewVersion"
    implementation "com.jaychang:simplerecyclerview-kotlin-android-extensions:$rootProject.lib.simplerecyclerviewVersion"

    // Network
    implementation "com.squareup.retrofit2:retrofit:$rootProject.lib.retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$rootProject.lib.retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$rootProject.lib.retrofitVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$rootProject.lib.okHttpVersion"

    // RxJava
    implementation "io.reactivex.rxjava2:rxjava:$rootProject.lib.rxJavaVersion"
    implementation "io.reactivex.rxjava2:rxandroid:$rootProject.lib.rxAndroidVersion"

    // Moxy
    implementation "com.arello-mobile:moxy:$rootProject.lib.moxyVersion"
    implementation "com.arello-mobile:moxy-app-compat:$rootProject.lib.moxyVersion"
    kapt "com.arello-mobile:moxy-compiler:$rootProject.lib.moxyVersion"

    // Leak canary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$rootProject.lib.leakcanaryVersion"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.lib.leakcanaryVersion"

    // Image
    implementation "com.github.chrisbanes:PhotoView:$rootProject.lib.photoViewVersion"
    implementation "com.android.support:palette-v7:$rootProject.lib.supportLibraryVersion"

    // Room
    implementation "android.arch.persistence.room:runtime:$rootProject.lib.roomVersion"
    implementation "android.arch.persistence.room:rxjava2:$rootProject.lib.roomVersion"
    kapt "android.arch.persistence.room:compiler:$rootProject.lib.roomVersion"

    // Test
    testImplementation "junit:junit:$rootProject.lib.junitVersion"
    androidTestImplementation "com.android.support.test:runner:$rootProject.lib.testRunnerVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$rootProject.lib.espressoVersion"
}

def getProperty(String filename, String propName) {
    def propsFile = rootProject.file(filename)
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if (props[propName] != null) {
            return props[propName]
        } else {
            print("No such property " + propName + " in file " + filename);
        }
    } else {
        print(filename + " does not exist!")
    }
}
